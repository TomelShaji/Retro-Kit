<%- include('../adminLayout/adminHeader.ejs') %>

<form action="/admin/addProduct" method="post" class="form-horizontal" enctype="multipart/form-data" id="addProductForm">
  <fieldset class="mx-auto" style="max-width: 600px;">
  
  <!-- Form Name -->
  <legend class="text-center">PRODUCTS</legend>
  
  <!-- Name -->
  <div class="form-group">
    <label class="col-md-12 control-label text-center" for="product_name">PRODUCT NAME</label>  
    <div class="col-md-12 text-center">
      <input name="name" id="product_name" placeholder="PRODUCT NAME" type="text" class="form-control input-md" style="margin-bottom: 10px;">
      <span id="nameError" class="text-danger"></span>
    </div>
  </div>
  
  <!-- Category -->
  <div class="form-group">
    <label class="col-md-12 control-label text-center" for="category">PRODUCT CATEGORY</label>
    <div class="col-md-12 text-center">
      <select name="category_id" id="category" class="form-control" style="margin-bottom: 10px;">
          <% for(let i=0; i < categories.length; i++) { %>
              <option value="<%= categories[i]._id %>"><%= categories[i].name %></option>
          <% } %>
      </select>
    </div>
  </div>

  <!-- Stock -->
  <div class="form-group">
    <label class="col-md-12 control-label text-center" for="stock">AVAILABLE QUANTITY</label>  
    <div class="col-md-12 text-center">
      <input type="number" name="stock" id="stock" placeholder="Stock" class="form-control input-md" style="margin-bottom: 10px;">
      <span id="stockError" class="text-danger"></span>
    </div>
  </div>
  
  <!-- Size -->
  <div class="form-group">
    <label class="col-md-12 control-label text-center" for="size">Size</label>  
    <div class="col-md-12 text-center">
      <select name="size" id="size" class="form-control" style="margin-bottom: 10px;">
          <option value="S">S</option>
          <option value="M">M</option>
          <option value="L">L</option>
          <option value="XL">XL</option>
          <option value="XXL">XXL</option>
      </select>
    </div>
  </div>

  <!-- Price -->
  <div class="form-group">
    <label class="col-md-12 control-label text-center" for="stock">Price</label>  
    <div class="col-md-12 text-center">
      <input type="number" name="price" id="price" placeholder="Price" class="form-control input-md" style="margin-bottom: 10px;">
      <span id="priceError" class="text-danger"></span>
    </div>
  </div>
  
  <!-- Description -->
  <div class="form-group">
    <label class="col-md-12 control-label text-center" for="description">PRODUCT DESCRIPTION</label>
    <div class="col-md-12 text-center">                     
      <textarea class="form-control" id="description" name="description" type="text" style="margin-bottom: 10px;"></textarea>
      <span id="descriptionError" class="text-danger"></span>
    </div>
  </div>

  <!-- Image preview -->
  <div id="imagePreview" class="mt-3" style="display: flex; gap: 10px; margin-bottom: 10px;"></div>

  <input type="hidden" name="imageUrls" id="imageUrls" value="<%= JSON.stringify([]) %>">

  <!-- Images -->
  <div class="form-group">
    <label class="col-md-12 control-label text-center" for="filebutton">Images</label>
    <div class="col-md-12 text-center">
      <input name="image" id="image-input" class="input-file" type="file" multiple style="margin-bottom: 10px;">
    </div>
  </div>

  <!-- Button -->
  <div class="form-group">
    <div class="col-md-12 text-center">
      <button type="submit" class="btn btn-primary">Add Product</button>
    </div>
  </div>
  
  </fieldset>
</form>

<!-- Image Cropping Modal -->
<div id="image-modal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Crop Image</h2>
        <img id="image-preview" src="">
        <button id="crop-button">Crop</button>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

<%- include('../adminLayout/adminFooter.ejs') %>

<script>
  let selectedImages = [];
  let cropper;
  const imageInput = document.getElementById('image-input');
  const imageModal = document.getElementById('image-modal');
  const imagePreview = document.getElementById('image-preview');
  const cropButton = document.getElementById('crop-button');
  const closeModal = document.querySelector('.close');
  const previewContainer = document.getElementById('imagePreview');

  imageInput.addEventListener('change', (event) => {
    const files = event.target.files;
    if (files && files.length > 0) {
        const reader = new FileReader();
        reader.onload = (e) => {
            imagePreview.src = e.target.result;
            imageModal.style.display = 'flex';
            if (cropper) {
                cropper.destroy();
            }
            cropper = new Cropper(imagePreview, {
                aspectRatio: 1, // Customize the aspect ratio as needed
                viewMode: 1,
            });
        };
        reader.readAsDataURL(files[0]);
    }
  });

  cropButton.addEventListener('click', () => {
    if (cropper) {
        const canvas = cropper.getCroppedCanvas();
        canvas.toBlob((blob) => {
            const imgContainer = document.createElement('div');
            imgContainer.style.display = 'flex';
            imgContainer.style.flexDirection = 'column';

            const img = document.createElement('img');
            img.src = URL.createObjectURL(blob);
            img.alt = 'Image Preview';
            img.style.width = '100px'; // Adjust the width as needed       

            const closeIcon = document.createElement('img');
            closeIcon.src = 'https://www.freeiconspng.com/thumbs/remove-icon-png/remove-icon-png-15.png';
            closeIcon.alt = 'Remove Image';
            closeIcon.style.width = '20px'; // Adjust the width as needed
            closeIcon.style.cursor = 'pointer';
            closeIcon.onclick = function () {
                imgContainer.remove();
                // Remove the image from the selectedImages array
                selectedImages = selectedImages.filter(image => image !== img.src);
                updateHiddenInput();
            };

            imgContainer.appendChild(img);
            imgContainer.appendChild(closeIcon);
            previewContainer.appendChild(imgContainer);

            // Add the blob to the selectedImages array
            selectedImages.push(blob);
            updateHiddenInput();
            imageModal.style.display = 'none';
            cropper.destroy();
        }, 'image/jpeg');
    }
  });

  closeModal.addEventListener('click', () => {
      imageModal.style.display = 'none';
      if (cropper) {
          cropper.destroy();
      }
  });

  window.addEventListener('click', (event) => {
      if (event.target === imageModal) {
          imageModal.style.display = 'none';
          if (cropper) {
              cropper.destroy();
          }
      }
  });

  function updateHiddenInput() {
      const hiddenInput = document.getElementById('imageUrls');
      hiddenInput.value = JSON.stringify(selectedImages);
  }

  document.getElementById('addProductForm').addEventListener('submit', function(event) {
    const formData = new FormData(this);
    event.preventDefault();

    let isValid = true;

    const name = document.getElementById('product_name').value.trim();
    const stock = document.getElementById('stock').value.trim();
    const price = document.getElementById('price').value.trim();
    const description = document.getElementById('description').value.trim();

    if (!name) {
      isValid = false;
      document.getElementById('nameError').innerText = 'Please enter a name';
    } else {
      document.getElementById('nameError').innerText = '';
    }

    if (!stock || isNaN(stock) || stock < 0) {
      isValid = false;
      document.getElementById('stockError').innerText = 'Please enter a valid stock';
    } else {
      document.getElementById('stockError').innerText = '';
    }

    if (!price || isNaN(price) || price <= 0) {
      isValid = false;
      document.getElementById('priceError').innerText = 'Please enter a valid price';
    } else {
      document.getElementById('priceError').innerText = '';
    }

    if (!description) {
      isValid = false;
      document.getElementById('descriptionError').innerText = 'Please enter a description';
    } else {
      document.getElementById('descriptionError').innerText = '';
    }

    if (!selectedImages.length) {
      isValid = false;
      alert('Please select and crop at least one image');
    }

    if (isValid) {
      // Clear any existing images in the FormData
      formData.delete('image');

      // Append only the cropped images
      selectedImages.forEach((blob, index) => {
        formData.append('image', blob, `image${index + 1}.jpg`);
      });

      fetch('/admin/addProduct', {
        method: 'POST',
        body: formData,
      })
      .then(response => {
        if (response.ok) {
          return response.json(); // Ensure response is parsed correctly
        } else {
          throw new Error('Error adding product');
        }
      })
      .then(data => {
        if (data.success) {
          window.location.href = '/admin/products';
        } else {
          alert('Error adding product');
        }
      })
      .catch(error => console.error('Error:', error));
    }
  });
</script>