<%- include('../adminLayout/adminHeader.ejs') %>

<form action="/admin/addProduct" method="post" class="form-horizontal" enctype="multipart/form-data" id="addProductForm">
  <fieldset class="mx-auto" style="max-width: 600px;">
  
  <!-- Form Name -->
  <legend class="text-center">PRODUCTS</legend>
  
  <!-- Name-->
  <div class="form-group">
    <label class="col-md-12 control-label text-center" for="product_name">PRODUCT NAME</label>  
    <div class="col-md-12 text-center">
      <input name="name" id="product_name" placeholder="PRODUCT NAME" type="text" class="form-control input-md" style="margin-bottom: 10px;">
      <span id="nameError" class="text-danger"></span>
    </div>
  </div>
  
  <!-- Category -->
  <div class="form-group">
    <label class="col-md-12 control-label text-center" for="category">PRODUCT CATEGORY</label>
    <div class="col-md-12 text-center">
      <select name="category_id" id="category" class="form-control"  style="margin-bottom: 10px;">
          <% for(let i=0; i < categories.length; i++) { %>
              <option value="<%= categories[i]._id %>"><%= categories[i].name %></option>
          <% } %>
      </select>
    </div>
  </div>

  <!-- Stock-->
  <div class="form-group">
    <label class="col-md-12 control-label text-center" for="stock">AVAILABLE QUANTITY</label>  
    <div class="col-md-12 text-center">
      <input type="number" name="stock" id="stock" placeholder=" Stock" class="form-control input-md"  style="margin-bottom: 10px;">
      <span id="stockError" class="text-danger"></span>
    </div>
  </div>
  
  <!-- Size-->
  <div class="form-group">
    <label class="col-md-12 control-label text-center" for="size"> Size</label>  
    <div class="col-md-12 text-center">
      <select name="size" id="size" class="form-control"  style="margin-bottom: 10px;">
          <option value="S">S</option>
          <option value="M">M</option>
          <option value="L">L</option>
          <option value="XL">XL</option>
          <option value="XXL">XXL</option>
      </select>
    </div>
  </div>

  <!-- Price-->
  <div class="form-group">
    <label class="col-md-12 control-label text-center" for="stock">Price</label>  
    <div class="col-md-12 text-center">
      <input type="number" name="price" id="price" placeholder=" Price" class="form-control input-md"  style="margin-bottom: 10px;">
      <span id="priceError" class="text-danger"></span>
    </div>
  </div>
  
  <!-- Description -->
  <div class="form-group">
    <label class="col-md-12 control-label text-center" for="description">PRODUCT DESCRIPTION</label>
    <div class="col-md-12 text-center">                     
      <textarea class="form-control" id="description" name="description"  type="text" style="margin-bottom: 10px;"></textarea>
      <span id="descriptionError" class="text-danger"></span>
    </div>
  </div>

  

  <!-- Image preview -->
  <div id="imagePreview" class="mt-3" style="display: flex; gap: 10px; margin-bottom: 10px;"></div>

  <input type="hidden" name="imageUrls" id="imageUrls" value="<%= JSON.stringify([]) %>">

  <!-- Images -->
  <div class="form-group">
    <label class="col-md-12 control-label text-center" for="filebutton">Images</label>
    <div class="col-md-12 text-center">
      <input name="image" class="input-file" type="file" multiple multiple onchange="previewImages(event)" style="margin-bottom: 10px;">
    </div>
  </div>
  
  <!-- Button -->
  <div class="form-group">
    <div class="col-md-12 text-center">
      <button type="submit" class="btn btn-primary">Add Product</button>
    </div>
  </div>
  
  </fieldset>
</form>
<%- include('../adminLayout/adminFooter.ejs') %>

<script>
  let selectedImages = [];

  function previewImages(event) {
      const previewContainer = document.getElementById('imagePreview');
      const files = event.target.files;

      for (const file of files) {
          const reader = new FileReader();

          reader.onload = function (e) {
              const imgContainer = document.createElement('div');
              imgContainer.style.display = 'flex';
              imgContainer.style.flexDirection = 'column';

              const img = document.createElement('img');
              img.src = e.target.result;
              img.alt = 'Image Preview';
              img.style.width = '100px'; // Adjust the width as needed

              const closeIcon = document.createElement('img');
              closeIcon.src = 'https://www.freeiconspng.com/thumbs/remove-icon-png/remove-icon-png-15.png';
              closeIcon.alt = 'Remove Image';
              closeIcon.style.width = '20px'; // Adjust the width as needed
              closeIcon.style.cursor = 'pointer';
              closeIcon.onclick = function () {
                  imgContainer.remove();
                  // Remove the image from the selectedImages array
                  selectedImages = selectedImages.filter(image => image !== img.src);
                  updateHiddenInput();
              };

              imgContainer.appendChild(img);
              imgContainer.appendChild(closeIcon);
              previewContainer.appendChild(imgContainer);

              // Add the image to the selectedImages array
              selectedImages.push(img.src);
              updateHiddenInput();
          };

          reader.readAsDataURL(file);
      }
  }

  function updateHiddenInput() {
      const hiddenInput = document.getElementById('imageUrls');
      hiddenInput.value = JSON.stringify(selectedImages);
  }

  
</script>

<script>
  document.getElementById('addProductForm').addEventListener('submit', function(event) {
    // Prevent form submission initially
    event.preventDefault();

    let isValid = true;

    const name = document.getElementById('product_name').value.trim();
    const stock = document.getElementById('stock').value.trim();
    const price = document.getElementById('price').value.trim();
    const description = document.getElementById('description').value.trim();

    // Reset previous error messages
    const nameError = document.getElementById('nameError');
    const stockError = document.getElementById('stockError');
    const priceError = document.getElementById('priceError');
    const descriptionError = document.getElementById('descriptionError');

    nameError.innerText = '';
    stockError.innerText = '';
    priceError.innerText = '';
    descriptionError.innerText = '';

    // Validate Product Name
    if (name.length < 1) {
      nameError.innerText = 'Product name must be at least 1 character long';
      isValid = false;
    }

    // Validate Stock
    if (stock <= 0) {
      stockError.innerText = 'Available quantity must be greater than 0';
      isValid = false;
    }

    // Validate Price
    if (price <= 99) {
      priceError.innerText = 'Price must be greater than 99';
      isValid = false;
    }

    // Validate Description
    if (description.length < 1) {
      descriptionError.innerText = 'Product description must be at least 1 character long';
      isValid = false;
    }

    // If all validations pass, submit the form
    if (isValid) {
      event.target.submit();
    }
  });
</script>
